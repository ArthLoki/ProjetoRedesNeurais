import string
from ProjetoRedesNeurais.auxiliary_func.getPath import get_base_path
import os

# Global variables
# 1 - Path
global base_path, data_path, csv_path, csv_total_path
base_path = get_base_path()
data_path = f'{base_path}/Images/T1'
csv_path = f'{base_path}/T1'

# 2 - Files
global filenames, csv_filename
filenames = [name for name in os.listdir(data_path) if os.path.splitext(name)[-1] == '.jpg']
csv_filename = 'output.csv'
csv_total_path = f'{csv_path}/{csv_filename}'

# 3 - aux variables
global alphabet, str_data_indexes
alphabet = [letter for letter in string.ascii_letters+string.punctuation.replace('.', '')+' ']
str_data_indexes = []


class Indexes:

    def __init__(self):
        self.files = Files()
        # self.data = Data()
        return

    def getSpecificIndexes(self, input):
        file = self.files.openTXT(data_path, filenames[0])
        header = self.files.createContentList(file, 0)

        indexes = []
        for i, label in enumerate(header):
            if input in label:
                indexes.append(i)
        return indexes

    def getSpecificIndexesFromContent(self, input, content):
        indexes = []
        for i, data in enumerate(content):
            if input in data:
                indexes.append(i)
        return indexes

    def getMultSpecificIndexes(self, lInput, content):
        indexes = []
        for input in lInput:
            aux = self.getSpecificIndexesFromContent(input, content)
            for index in aux:
                if index not in indexes:
                    indexes.append(index)
        return indexes

    def getDateIndexes(self, content):
        dateIndexes = self.getMultSpecificIndexes(['DateTime', ':'], content)
        return dateIndexes

    def findIndexFilePath(self):
        FilePathIndex = self.getSpecificIndexes('FilePath')
        return FilePathIndex[0]

    def findStrIndexes(self, content):
        strIndexes = sorted(getMultSpecificIndexes(alphabet, content))

        dateIndexes = self.getDateIndexes(content)
        for i in dateIndexes:
            if i in strIndexes:
                strIndexes.remove(i)

        return strIndexes


class Files:

    def __init__(self):
        self.indexes = Indexes()
        # self.data = Data()
        return

    def openTXT(self, path, filename):
        file_path = f'{path}/{filename}.txt'
        file = open(file_path, 'r')
        return file

    def processingData(self, content, escolha_tratamento):
        filePathIndex = self.indexes.findIndexFilePath()

        if escolha_tratamento == 0:
            # Replaces \\ to /
            content[filePathIndex] = content[filePathIndex].replace('\\\\', '/')
        if escolha_tratamento == 1:
            # Removes the FilePath data from dataset
            content.pop(filePathIndex)
        elif escolha_tratamento == 2:
            # Makes the header label shorter
            for i, h in enumerate(content):
                content[i] = h.split('/')[-1]
        return content

    def writeCSV(self, content, modo):
        file = open(csv_total_path, modo)
        if type(content) == list:
            file.write(content[0])
            for c in content[1:]:
                if c == '<undefined>':
                    file.write(f';{0}')
                else:
                    file.write(f';{c}')
            file.write('\n')
        file.close()
        return


class Data:

    def __init__(self):
        self.files = Files()
        # self.indexes = Indexes()
        return

    def getHeaderList(self):
        file = self.files.openTXT(data_path, filenames[0])
        header = self.files.createContentList(file, 0)
        header = self.files.processingData(header, 1)
        file.close()
        return header

    def cleanDataContentList(self, lData):
        lDataFixed = []
        for i in range(len(lData)):
            lDataFixed.append(lData[i].split('\"')[1])
        return lDataFixed

    def createContentList(self, file, content_type):
        content = []
        for line in file:
            lData = str(line).strip().split(',')
            lData = self.cleanDataContentList(lData)

            if content_type == 0:  # wants to get header list
                content.append(lData[0])
            elif content_type == 1:
                content.append(lData[1])  # wants to get data list
            else:
                print("Escolha um tipo valido")
        return content

    def getContentList(self, filename):
        file = self.files.openTXT(data_path, filename)
        content = self.files.createContentList(file, 1)
        content = self.files.processingData(content, 1)
        file.close()
        return content


class CSVfile:

    def __init__(self):
        self.files = Files()
        self.data = Data()
        self.indexes = Indexes()
        return

    def generateExifDataset(self):
        global str_data_indexes

        # Run this part only once to add header
        header = self.data.getHeaderList()
        self.files.writeCSV(header, 'w')

        for filename in filenames:
            content = self.data.getContentList(filename)
            str_data_indexes.append(self.indexes.findStrIndexes(content))
            self.files.writeCSV(content, 'a')
        print('csv generated')


# if __name__ == '__main__':
#     generateExifDataset()