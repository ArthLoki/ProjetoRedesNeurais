## ConvertString2Number.py
import numpy as np
from datetime import datetime


def date2num(date):  # index from dateIndexes
    date_num = datetime.strptime(date, '%d/%m/%Y %H:%M:%S')
    return int(date_num.timestamp())


def str2num(data):
    hashed_value = hash(data)
    normalized_value = (hashed_value % 1000 + 1000) % 1000  # Garantir que esteja entre 0 e 1000
    return normalized_value


## identifyImages.py
# from ProjetoRedesNeurais.auxiliary_func.getPath import get_base_path
from ProjetoRedesNeurais.auxiliary_func.getTimer import timer_data

import numpy as np
import torch
import csv
import os

from getFormatedExifData import generateExifDataset, getSpecificIndexes
# from getFormatedExifData import getSpecificIndexesFromContent, getMultSpecificIndexesFromContent
from getFormatedExifData import base_path, csv_filename
from getFormatedExifData import strIndexes, dateIndexes, all_content

from contertString2number import str2num, date2num


def importCSVData():
    csv_data_numpy = np.loadtxt(
        csv_path+'/'+csv_filename,
        dtype=np.float32,
        delimiter=';',
        skiprows=1,
        converters={i: lambda content: getConverters(content, i) for i in strIndexes}
    )
    return torch.from_numpy(csv_data_numpy)  # Returns a PyTorch Tensor


# def getConverters(content):
#     converters = {}
#
#     # add texts
#     for i in str_data_indexes:
#         converters[i] = str2num(content, i)
#
#     # add date
#     for j in dateIndexes:
#         converters[j] = date2num(content, j)
#
#     return converters

def getConverters(content, i):
    if i in dateIndexes:
        return date2num(content[i])
    else:
        return str2num(content[i])


# REFORMULAR
# def getOgColumnList():
#     ogColumnList = []
#
#     # 1 - get image filenames, creating a list
#     imageIdentifierColumnList = getImageIdentifierColumnList()
#
#     # 2 - check if 'og' is in each filename in this list. If so, append 1.0 to the ogColumnList, else append 0.0
#     for name in imageIdentifierColumnList:
#         if 'og' in name:
#             ogColumnList.append(1.0)
#         else:
#             ogColumnList.append(0.0)
#
#     # 3 - return ogColumnList
#     return ogColumnList


def main():

    # generate csv file from exif data/raw data. it still need to be changed later
    generateExifDataset()
    print(strIndexes)

    # import csv data to a pytorch tensor
    exif_data = importCSVData()
    print(exif_data.shape)


if __name__ == '__main__':
    timer_data(main)

## Converters
# def getConverters(content):
#     converters = {}
#
#     # add texts
#     for i in str_data_indexes:
#         converters[i] = str2num(content, i)
#
#     # add date
#     for j in dateIndexes:
#         converters[j] = date2num(content, j)
#
#     return converters

# def getConverters(content, i):
#     print(i, i+1)
#
#     content = list(content)
#     if i in list(dateIndexes[i]):
#         return date2num(content[i])
#     else:
#         return str2num(content[i])

# csv_exif = csv.reader(open(csv_path+'/'+csv_filename1), delimiter=";")
# col_list = next(csv_exif)
# exif_data_aux = exif_data
# print(exif_data_aux.shape, exif_data_aux[1].shape)

# add column to verify results later
# ogColumnTensor = getOgColumnData()
# target = exif_data[:, :].long()
# print(target.shape, ogColumnTensor.shape, target.unsqueeze(1).shape)
# exif_data_aux.scatter_(0, target.unsqueeze(1), ogColumnTensor)
# print(exif_data.shape)


# def getPermuteList(col_list):
#     imageUniqueIdIndex = getIndex(col_list, 'ImageUniqueID')  # Index = 37
#     FileNameIndex = getIndex(col_list, 'FileName')  # Index = 0
#
#     num_list = [num for i in range(45)]
#
#     permList = []
#     for num in range(len(col_list)):
#         if i == FileNameIndex:
#             permList.append(-2)
#         elif i == imageUniqueIdIndex:
#             permList.append(0)
#         else:
#             permList.append(i)
#     return permList


# def getOgColumnData(col_list=()):
#     ogColumnList = []
#     # tensor = torch.zeros(len(col_list))
#
#     # 1 - check if 'og' is in each filename in this list. If so, append 1 to the ogColumnList, else append 0
#     for i, name in enumerate(filenames):
#         if 'og_' in name:
#             # tensor[i] = 1
#             ogColumnList.append(1.0)
#         else:
#             # tensor[i] = 0
#             ogColumnList.append(0.0)
#
#     # 2 - create a tensor containing the content of ogColumnList
#     tensor = torch.tensor(ogColumnList)
#
#     # 3  - return
#     return tensor

    print(exif_data.stride())
    exif_transposed_data = exif_data.transpose(0, 1)
    print(exif_data.shape, exif_transposed_data.shape)

    exif_perm_data = exif_transposed_data.permute(
        37, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
        35, 36, 38, 39, 40, 41, 42, 43, 0, 44
    )
    print(exif_perm_data.shape)

    # permute columns
    # for i, name in enumerate(filenames):
        # exif_perm_data = exif_data[i, :].permute(
        #     37, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        #     18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
        #     35, 36, 38, 39, 40, 41, 42, 43, 0, 44
        # )

        # exif_perm_data = torch.permute(exif_data[i, :], (37, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
        #     18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
        #     35, 36, 38, 39, 40, 41, 42, 43, 0, 44))
        # print(exif_perm_data.shape, exif_perm_data.size())